#
#    Project: mxPluginExec
#             http://www.edna-site.org
#
#    Copyright (C) 2008-2012 European Synchrotron Radiation Facility
#                            Grenoble, France
#
#    Principal authors:      Marie-Francoise Incardona (incardon@esrf.fr)
#                            Olof Svensson (svensson@esrf.fr) 
#
#    Contributing author:    Karl Levik (karl.levik@diamond.ac.uk)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as published
#    by the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    and the GNU Lesser General Public License  along with this program.  
#    If not, see <http://www.gnu.org/licenses/>.
#


__authors__ = [ "Olof Svensson", "Marie-Francoise Incardona", "Karl Levik" ]
__contact__ = "svensson@esrf.fr"
__license__ = "LGPLv3+"
__copyright__ = "European Synchrotron Radiation Facility, Grenoble, France"
__date__ = "20120712"
__status__ = "deprecated"

import os

from EDAssert                            import EDAssert
from EDTestCasePluginUnit                import EDTestCasePluginUnit
from EDUtilsTest                         import EDUtilsTest

from XSDataLabelitv10 import XSDataInputLabelit

class EDTestCasePluginUnitLabelitv10(EDTestCasePluginUnit):


    def __init__(self, _edStringTestName=None):
        EDTestCasePluginUnit.__init__(self, "EDPluginLabelitv10", "EDPluginLabelit-v1.0", _edStringTestName)
        self.strReferenceInputFile = os.path.join(self.getPluginTestsDataHome(), "XSDataInputLabelit_reference.xml")
        self.strReferenceOutputFile = os.path.join(self.getPluginTestsDataHome(), "XSDataResultLabelit_reference.xml")




    def testSetDataInput(self):
        """
        This method test the setDataInput method of the Labelit plugin by providing an XML string
        and then retriving an XSDataInputLabelit object.
        """
        edPluginLabelitv10 = self.createPlugin()
        xsPluginItemGood01 = self.getPluginConfiguration(os.path.join(self.getPluginTestsDataHome(), "XSConfiguration.xml"))
        edPluginLabelitv10.setConfiguration(xsPluginItemGood01)
        edPluginLabelitv10.setScriptExecutable("cat")
        edPluginLabelitv10.configure()
        xmlInput = self.readAndParseFile(self.strReferenceInputFile)
        edPluginLabelitv10.setDataInput(xmlInput)
        xsDataInputLabelitReference = XSDataInputLabelit.parseString(xmlInput)
        xsDataIntegrationv10Input = edPluginLabelitv10.getDataInput()
        EDAssert.equal(xsDataInputLabelitReference.marshal(), xsDataIntegrationv10Input.marshal())
        self.cleanUp(edPluginLabelitv10)



    def testInitaliseLabelitCommandLine(self):
        """
        This method tests the initaliseLabelitCommandLine method of the Labelit plugin.
        """
        edPluginLabelitv10 = self.createPlugin()
        strReferenceInputFile = os.path.join(self.getPluginTestsDataHome(), "XSDataInputLabelit_testCommandLine.xml")
        xmlInput = self.readAndParseFile(strReferenceInputFile)
        edPluginLabelitv10.setDataInput(xmlInput)
        edPluginLabelitv10.initaliseLabelitCommandLine()
        strScriptCommandLine = edPluginLabelitv10.getScriptCommandline()
        strCommandLineExpected = "--index_only images/ref-testscale_1_001.img images/ref-testscale_1_002.img"
        EDAssert.equal(strCommandLineExpected, strScriptCommandLine)


    def testParseLabelitScreenOutput(self):
        """
        This method test the parsing of the Labelit results in the log file.
        """
        edPluginLabelitv10 = self.createPlugin()
        strPathToLabelitLogText = os.path.join(self.getPluginTestsDataHome(), "labelit_v1000rc11.log")
        strLabelitLogText = self.readAndParseFile(strPathToLabelitLogText)
        xsDataLabelitScreenOutput = edPluginLabelitv10.parseLabelitScreenOutput(strLabelitLogText)
        strLabelitScreenOutputFile = os.path.join(self.getPluginTestsDataHome(), "XSDataLabelitScreenOutput_reference.xml")
        strLabelitScreenOutputXML = self.readAndParseFile(strLabelitScreenOutputFile)
        from XSDataLabelitv10 import XSDataLabelitScreenOutput
        xsDataLabelitScreenOutputReference = XSDataLabelitScreenOutput.parseString(strLabelitScreenOutputXML)
        EDAssert.equal(xsDataLabelitScreenOutputReference.marshal(), xsDataLabelitScreenOutput.marshal())


    def testParseMosflmScriptsOutput(self):
        """
        This method tests the parsing of the MOSFLM script generated by Labelit.
        """
        edPluginLabelitv10 = self.createPlugin()
        # First file from version 1000rc11
        strPathToMOSFLMScript = os.path.join(self.getPluginTestsDataHome(), "integration05_csh_v1000rc11.txt")
        strMOSFLMScript = self.readAndParseFile(strPathToMOSFLMScript)
        xsDataLabelitMosflmScriptsOutput = edPluginLabelitv10.parseMosflmScriptsOutput(strMOSFLMScript)
        xsDataLabelitMosflmScriptsOutput.exportToFile("XSDataLabelitMosflmScriptsOutput_reference.xml")
        strLabelitMosflmScriptsOutputFile = os.path.join(self.getPluginTestsDataHome(), "XSDataLabelitMosflmScriptsOutput_reference.xml")
        strLabelitMosflmScriptsOutputXML = self.readAndParseFile(strLabelitMosflmScriptsOutputFile)
        from XSDataLabelitv10 import XSDataLabelitMosflmScriptsOutput
        xsDataLabelitMosflmScriptsOutputReference = XSDataLabelitMosflmScriptsOutput.parseString(strLabelitMosflmScriptsOutputXML)
        EDAssert.equal(xsDataLabelitMosflmScriptsOutputReference.marshal(), xsDataLabelitMosflmScriptsOutput.marshal())
        # Second file from version 1000b1
        strPathToMOSFLMScript = os.path.join(self.getPluginTestsDataHome(), "integration05_csh_v1000b1.txt")
        strMOSFLMScript = self.readAndParseFile(strPathToMOSFLMScript)
        xsDataLabelitMosflmScriptsOutput = edPluginLabelitv10.parseMosflmScriptsOutput(strMOSFLMScript)
        xsDataLabelitMosflmScriptsOutput.exportToFile("XSDataLabelitMosflmScriptsOutput_v1000b1_reference.xml")
        strLabelitMosflmScriptsOutputFile = os.path.join(self.getPluginTestsDataHome(), "XSDataLabelitMosflmScriptsOutput_v1000b1_reference.xml")
        strLabelitMosflmScriptsOutputXML = self.readAndParseFile(strLabelitMosflmScriptsOutputFile)
        from XSDataLabelitv10 import XSDataLabelitMosflmScriptsOutput
        xsDataLabelitMosflmScriptsOutputReference = XSDataLabelitMosflmScriptsOutput.parseString(strLabelitMosflmScriptsOutputXML)
        EDAssert.equal(xsDataLabelitMosflmScriptsOutputReference.marshal(), xsDataLabelitMosflmScriptsOutput.marshal())


    def testGenerateMosflmScriptName(self):
        """
        This method tests the generateMosflmScriptName method of the Labelit plugin.
        """
        edPluginLabelitv10 = self.createPlugin()
        EDAssert.equal("integration01.csh", edPluginLabelitv10.generateMosflmScriptName(1))
        EDAssert.equal("integration10.csh", edPluginLabelitv10.generateMosflmScriptName(10))


    def testGenerateExecutiveSummary(self):
        """
        This method tests the generateExecutiveSummary of the Labelit plugin.
        It contains no assert call so the contents of the executive summary is not tested.
        """
        edPluginLabelitv10 = self.createPlugin()
        xmlInput = self.readAndParseFile(self.strReferenceInputFile)
        edPluginLabelitv10.setDataInput(xmlInput)
        strPath = os.path.join(self.getPluginTestsDataHome(), self.strReferenceOutputFile)
        strXMLResultLabelit = self.readAndParseFile(strPath)
        from XSDataLabelitv10 import XSDataResultLabelit
        xsDataResultLabelit = XSDataResultLabelit.parseString(strXMLResultLabelit)
        edPluginLabelitv10.setDataOutput(xsDataResultLabelit)
        edPluginLabelitv10.generateExecutiveSummary(edPluginLabelitv10)




    def process(self):
        self.addTestMethod(self.testSetDataInput)
        self.addTestMethod(self.testInitaliseLabelitCommandLine)
        self.addTestMethod(self.testParseLabelitScreenOutput)
        self.addTestMethod(self.testParseMosflmScriptsOutput)
        self.addTestMethod(self.testGenerateMosflmScriptName)
        self.addTestMethod(self.testGenerateExecutiveSummary)




if __name__ == '__main__':

    edTestCasePluginUnitLabelitv10 = EDTestCasePluginUnitLabelitv10("EDTestCasePluginUnitLabelitv10")
    edTestCasePluginUnitLabelitv10.execute()

